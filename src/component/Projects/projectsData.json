[
    {
      "id": 1,
      "title": "CSFairTrade",
      "description": "A full-stack trading platform providing a secure and user-friendly environment for trading in-game skins in the CS:GO market, estimated over 1 billion euros. I single-handedly developed this platform from scratch, tackling complex challenges of real-time data sync and transaction management.",
      "detailedDescription": "A full-stack trading platform developed by me. The platform allows users to buy and sell virtual assets in the gaming community, a market valued at over ‚Ç¨1 billion\n\nüõ†Ô∏è Technology Stack: CSFairTrade utilizes a modern web tech stack with React.js for an interactive frontend, Node.js and Express.js for the backend, and MySQL for data management in an MVC architecture. I've also integrated Socket.IO for real-time bidirectional communication between users and bots, complemented with HTTPS requests for data display and manipulation.\n\nüíº User Authentication: I've integrated the Steam API's OAuth 2.0 for a smooth user registration process. Upon signing in via Steam, user data is stored in a session and saved to the database, ensuring a smooth user experience.\n\nüéÆ Platform: CSFairTrade provides an interface that enables users to directly manage their inventories. It retrieves user inventory data, aggregates data from all bots, and accesses the current price list. Despite the limitations of Steam's API requests, I've developed a solution that stores and displays data using MySQL. Currently, this database is hosted on Azure. The platform's design is an event-driven and REST API architecture, which enhances its efficiency and responsiveness.\n\nüöÄ Deployment: CSFairTrade is deployed on DigitalOcean droplets using PM2, with unique IPs allocated for both frontend and backend. We manage the CI/CD pipeline through GitHub Actions. All traffic is SSL-secured and directed via Nginx. Both unit and functional tests are in place for stability, and firewalls enhance security.\n\nüèÜCSFairTrade represents a personal achievement for me, involving numerous hours of learning and understanding various technologies outside of my formal education. The project required me to tackle challenges including working with APIs, implementing a user authentication process, integrating payment gateways, business logic, and even setting up a fully functional CI/CD pipeline.",
      "image": "../../img/csgo.png",
      "technologyStack": ["React.js", "Node.js", "Express.js", "MySQL", "Socket.IO", "HTTPS", "Nginx", "Digital Ocean", "Azure"],
      "liveDemo": "https://csfairtrade.com/",
      "githubRepo": null
    },
    {
      "id": 2,
      "title": "Blackjack game",
      "description": "A desktop version of the Blackjack card game, developed in collaboration with a classmate. It was a challenging yet exciting process to transform the game rules into logic and implementing it in Java.",
      "detailedDescription": "A desktop version of the popular Blackjack card game implemented using Java. This game was developed in collaboration with a classmate, and I enjoyed converting the real-world rules into programmatic logic.\n\nüé≤ Game Basics: The game blackjack requires the player and dealer to have two cards each. One of the dealer's cards remains concealed from the player. Players have options to either stand or hit, which are displayed as buttons. The game's primary goal is to ensure the player's score does not exceed 21.\n\nüìú Game Rules: If the player's score is above 21, they lose. Otherwise, when the player stands, it's the dealer's turn to hit. The dealer continues hitting until they reach a score of 17 or more. Once the dealer's turn is over and their score is under 21, both player and dealer scores are compared. Depending on the comparison, the player can either win, lose, or tie. Players also have an option to place bets, but they can't bet beyond their current balance.\n\nüõ†Ô∏è MVC Design: The design follows the model-view-controller (MVC) pattern, ensuring clear code structure. The model manages data, the view is responsible for displaying the game, and the controller handles the game logic.\n\nüåê Design Choice: The MVC pattern was chosen because of its robustness in maintaining a clean separation between the frontend and backend. One alternative was to let the graphical user interface handle both game logic and display, but this would complicate code management.",
      "image": "../../img/blackjack.png",
      "technologyStack": ["Java", "Java Swing"],
      "liveDemo": null,
      "githubRepo": "https://github.com/RaymondSWE/Blackjack-game"
    },
    {
      "id": 3,
      "title": "Simple Website",
      "description": "A fundamental project developed while learning web development basics. Following a YouTube tutorial, I created this simple website to gain hands-on experience with HTML, CSS, and JavaScript.",
      "detailedDescription": "A hands-on project developed while following a YouTube tutorial to grasp the fundamentals of web development. This website serves as a testament to the power of modern web development techniques, including CSS Grid and Flexbox.\n\nüåê Overview: The website is designed as a fictitious cloud hosting platform. The design inspiration is drawn from Heroku, and the website comprises three main pages: home, features, and docs.\n\nüõ†Ô∏è Modern Techniques: The tutorial emphasizes the use of modern web techniques such as CSS Grid for layout design, Flexbox for alignment, and animations for enhanced user experience.\n\nüìù Content Layout: The home page boasts a navbar, a form for demo requests, stats with Font Awesome icons, a mock npm install section, supported programming languages, and a footer.\n\nüì± Responsiveness: The website is built with responsiveness in mind, ensuring it looks and functions seamlessly across devices of varying screen sizes. The design adjusts for tablet and mobile views, changing the direction of animations and optimizing the menu for smaller screens.\n\nüé® Styling: The tutorial delves deep into styling, starting with the navbar. It introduces a container class to constrain content width, ensuring a clean and organized look on larger screens. The instructor also touches upon the importance of a consistent color scheme, typography, and more.\n\nüìö Learning Outcome: This project is perfect for those looking to solidify their understanding of HTML, CSS, and JavaScript. It offers a practical approach to learning, ensuring that learners not only understand the theory but also know how to implement it in real-world scenarios.",
      "image": "../../img/Todo-javaswing.png",
      "technologyStack": ["HTML, CSS and Javascript"],
      "liveDemo": "https://clever-pasca-d05919.netlify.app/",
      "githubRepo": "https://github.com/RaymondSWE/RayDeploy"
    },
    {
      "id": 4,
      "title": "Web Portfolio",
      "description": "A personal web portfolio built with React.js over a couple of days, showcasing my skills and experiences in an easy way.",
      "detailedDescription": "My personal web portfolio is designed to be a comprehensive showcase of my skills, experiences, and projects. As a developer, I understand the importance of presenting oneself in a digital format that is both visually appealing and efficient.\n\nüñ•Ô∏è Design and Implementation: The design is minimalist and focuses on content, ensuring that visitors get to know me and my work without unnecessary distractions. I've employed smooth scrolling and subtle animations to enhance user engagement.\n\nüìñ Content Sections: The portfolio is divided into various sections such as 'About Me', 'Skills', 'Projects', 'Testimonials', and 'Contact'. Each section is designed to provide insight into different facets of my professional journey.\n\nüõ†Ô∏è React Components: Built using React.js, the website leverages the power of components. Each section and element on the site is a React component, making it modular and easy to manage and update.\n\nüåê Responsiveness: Designed with a mobile-first approach, the portfolio is fully responsive. It provides a seamless experience across desktops, tablets, and mobile devices.\n\nüîó Navigation: A fixed navigation bar at the top provides quick access to all sections, enhancing the user experience with easy navigation.\n\nüèÜ Achievements & Certifications: This section displays my key achievements and certifications with accompanying icons, offering a visual representation of my accomplishments.\n\nüì• Contact Form: The 'Contact' section features a form that allows potential employers or collaborators to get in touch with me directly through the website. It is integrated with a backend service to ensure timely delivery of messages.\n\nüöÄ Deployment: Hosted on Netlify, the portfolio benefits from fast load times and SSL security. Continuous deployment ensures that any updates made to the GitHub repository are immediately reflected on the live site.\n\nThis portfolio not only showcases my work but is also a testament to my frontend development skills, emphasizing both aesthetics and functionality.",
      "image": "../../img/webportfolio.png",
      "technologyStack": ["React.js", "Netlify", "CSS", "JavaScript"],
      "liveDemo": "https://raymondportfolio.com/",
      "githubRepo": "https://github.com/RaymondSWE/Portfolio"
    }
  ]
  